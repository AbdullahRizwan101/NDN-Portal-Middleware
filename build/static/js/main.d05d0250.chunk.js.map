{"version":3,"sources":["components/Login.js","components/TopoBuilder.js","components/TopoViewer.js","components/TitlePage.js","components/App.js","index.js"],"names":["Login","loginInput","setLoginInput","handleLogin","viewBuilder","ViewTopo","SetViewBuilder","ViewLogin","style","display","alignItems","width","height","Container","border","padding","Row","className","fontFamily","Col","xs","Form","Group","controlId","Label","Control","data-testid","type","placeholder","value","username","onChange","event","target","password","Text","Button","variant","onClick","TopoBuilder","data","addNode","addLink","linkInput","setLinkInput","createTopology","myConfig","onClickLink","onClickNode","useState","makeTopo","setMakeTopo","showAlert","setShowAlert","Alert","onClose","dismissible","transition","paddingTop","block","InputGroup","FormControl","aria-label","aria-describedby","sourceInput","destinationInput","backgroundColor","id","config","TopoViewer","setOutput","showTerminal","setShowTerminal","structure","showTable","setShowTable","nodeClicked","setNodeClicked","showModal","setShowModal","showLoading","setShowLoading","Modal","show","onHide","backdrop","keyboard","Body","Header","closeButton","Title","Footer","nodeID","toString","class","axios","get","setTimeout","justifyContent","marginTop","color","barColor","fontWeight","fontSize","startState","commands","window","open","popup","alert","showmsg","descriptions","msg","TitlePage","ViewTitlePage","ViewLoginForm","App","nodes","links","source","setData","setViewTopo","setViewTitlePage","setViewLogin","nodeHighlightBehavior","node","size","highlightStrokeColor","link","highlightColor","nodeId","console","log","length","nodesNum","setNodesNum","x","y","nodeCordinates","setNodeCordinates","setViewBuilder","overflowY","post","then","response","status","Error","catch","error","concat","var1","find","var2","var3","string","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d05d0250.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Button, Alert, Row, Form, Col } from \"react-bootstrap\";\r\n\r\nconst Login = ({\r\n  loginInput,\r\n  setLoginInput,\r\n  handleLogin,\r\n  viewBuilder,\r\n  SetViewBuilder,\r\n  ViewTopo,\r\n  ViewLogin,\r\n}) => {\r\n  if (viewBuilder === false && ViewTopo === false && ViewLogin === true) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          width: \"100%\",\r\n          height: \"100vh\",\r\n          // backgroundColor: \"#85FFBD\",\r\n          // backgroundImage: \"linear-gradient(45deg, #85FFBD 0%, #FFFB7D 100%)\",\r\n          // background: \"#36D1DC\" /* fallback for old browsers */,\r\n          // background:\r\n          //   \"-webkit-linear-gradient(to right, #5B86E5, #36D1DC)\" /* Chrome 10-25, Safari 5.1-6 */,\r\n          // background:\r\n          //   \"linear-gradient(to right, #5B86E5, #36D1DC)\" /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */,\r\n        }}\r\n      >\r\n        <Container>\r\n          {/* <h1 className=\"text-center\" style={{ fontFamily: \"Roboto\" }}>\r\n            NAME DATA NETWORKING(NDN) PORTAL\r\n          </h1> */}\r\n          <div style={{ border: \"2px solid black\", padding: \"5px\" }}>\r\n            <Row className=\"justify-content-center\">\r\n              <h1 style={{ fontFamily: \"Roboto\" }}>Login</h1>\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n              <Col xs=\"auto\">\r\n                <Form className=\"justify-content-center\">\r\n                  <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control\r\n                      data-testid=\"login-form-username\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Username\"\r\n                      value={loginInput.username}\r\n                      onChange={(event) => {\r\n                        setLoginInput({\r\n                          username: event.target.value,\r\n                          password: loginInput.password,\r\n                        });\r\n                      }}\r\n                    />\r\n                    <Form.Text className=\"text-muted\">\r\n                      Never share your username or password with anyone else.\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                      data-testid=\"login-form-password\"\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      value={loginInput.password}\r\n                      onChange={(event) => {\r\n                        setLoginInput({\r\n                          username: loginInput.username,\r\n                          password: event.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Form.Group>\r\n                  <div className=\"text-center\">\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      onClick={() => {\r\n                        handleLogin();\r\n                      }}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { Graph } from \"react-d3-graph\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\n\r\nconst TopoBuilder = ({\r\n  data,\r\n  addNode,\r\n  addLink,\r\n  linkInput,\r\n  setLinkInput,\r\n  createTopology,\r\n  myConfig,\r\n  onClickLink,\r\n  onClickNode,\r\n  ViewTopo,\r\n  viewBuilder,\r\n  username,\r\n}) => {\r\n  const [makeTopo, setMakeTopo] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(true);\r\n\r\n  const alertMessage = () => {\r\n    if (showAlert) {\r\n      return (\r\n        <Alert\r\n          variant=\"success\"\r\n          onClose={() => setShowAlert(false)}\r\n          dismissible\r\n          transition\r\n        >\r\n          Welcome back {username}!\r\n        </Alert>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  if (viewBuilder === true) {\r\n    return (\r\n      <Container>\r\n        {alertMessage()}\r\n        <h1 style={{ fontFamily: \"Roboto\", paddingTop: \"20px\" }}>TOPOLOGY</h1>\r\n        <Row style={makeTopo ? {} : { height: \"85vh\" }}>\r\n          <Col>\r\n            <Button\r\n              variant=\"secondary\"\r\n              block\r\n              onClick={() => setMakeTopo(true)}\r\n              data-testid=\"create-topology-button\"\r\n            >\r\n              Create Topology\r\n            </Button>{\" \"}\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              variant=\"secondary\"\r\n              block\r\n              onClick={createTopology}\r\n              data-testid=\"view-topology-button\"\r\n            >\r\n              View Topology\r\n            </Button>{\" \"}\r\n          </Col>\r\n        </Row>\r\n        <br></br>\r\n        <Row className={makeTopo ? \"\" : \"d-none\"}>\r\n          <Col className=\"justify-content-right\">\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <Button variant=\"secondary\" onClick={addNode} block>\r\n              Add Node\r\n            </Button>{\" \"}\r\n            <br></br>\r\n            {/* <input\r\n            type=\"text\"\r\n            value={linkInput.sourceInput}\r\n            placeholder=\"Source Node\"\r\n            onChange={(event) => {\r\n              setLinkInput({\r\n                sourceInput: event.target.value,\r\n                destinationInput: linkInput.destinationInput,\r\n              });\r\n            }}\r\n          />\r\n          <br></br>\r\n          <input\r\n            type=\"text\"\r\n            value={linkInput.destinationInput}\r\n            placeholder=\"Destination Node\"\r\n            onChange={(event) => {\r\n              setLinkInput({\r\n                destinationInput: event.target.value,\r\n                sourceInput: linkInput.sourceInput,\r\n              });\r\n            }}\r\n          />\r\n          <br></br> */}\r\n            <InputGroup className=\"\">\r\n              <FormControl\r\n                aria-label=\"Source Node\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={linkInput.sourceInput}\r\n                placeholder=\"Source Node\"\r\n                onChange={(event) => {\r\n                  setLinkInput({\r\n                    sourceInput: event.target.value,\r\n                    destinationInput: linkInput.destinationInput,\r\n                  });\r\n                }}\r\n              />\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-1\">\r\n              <FormControl\r\n                aria-label=\"Destination Node\"\r\n                aria-describedby=\"basic-addon1\"\r\n                value={linkInput.destinationInput}\r\n                placeholder=\"Destination Node\"\r\n                onChange={(event) => {\r\n                  setLinkInput({\r\n                    destinationInput: event.target.value,\r\n                    sourceInput: linkInput.sourceInput,\r\n                  });\r\n                }}\r\n              />\r\n            </InputGroup>\r\n            <Button variant=\"secondary\" onClick={addLink} block>\r\n              Add Link\r\n            </Button>{\" \"}\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <Button variant=\"secondary\" onClick={createTopology} block>\r\n              Submit\r\n            </Button>{\" \"}\r\n            {/* <Button variant=\"secondary\" block>\r\n              Delete\r\n            </Button>\r\n            <Button variant=\"secondary\" block>\r\n              Go Back\r\n            </Button>{\" \"} */}\r\n          </Col>\r\n          <Col>\r\n            <div\r\n              style={{\r\n                border: \"2px solid black\",\r\n                width: \"100%\",\r\n                height: \"80vh\",\r\n                backgroundColor: \"white\",\r\n              }}\r\n            >\r\n              <Graph\r\n                id=\"graph-id\" // id is mandatory\r\n                data={data}\r\n                config={myConfig}\r\n                onClickNode={onClickNode}\r\n                onClickLink={onClickLink}\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default TopoBuilder;\r\n","import { React, useState } from \"react\";\r\nimport { Graph } from \"react-d3-graph\";\r\nimport axios from \"axios\";\r\nimport Terminal from \"terminal-in-react\";\r\nimport { Container, Button, Row, Col, Form, Modal } from \"react-bootstrap\";\r\n\r\nconst TopoViewer = ({ data, myConfig, onClickLink, ViewTopo }) => {\r\n  const [command, setCommand] = useState(\"\");\r\n  const [output, setOutput] = useState(\"\");\r\n\r\n  /* TERMINAL RELATED METHODS AND STATES */\r\n\r\n  const [showTerminal, setShowTerminal] = useState(true);\r\n  const terminal = () => {\r\n    if (showTerminal) {\r\n      return (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            marginTop: \"5px\",\r\n          }}\r\n        >\r\n          <Terminal\r\n            color=\"green\"\r\n            backgroundColor=\"black\"\r\n            barColor=\"black\"\r\n            style={{\r\n              marginTop: \"5px\",\r\n              border: \"1px solid white\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"1em\",\r\n              height: \"500px\",\r\n            }}\r\n            startState=\"maximised\"\r\n            commands={{\r\n              \"open-google\": () =>\r\n                window.open(\"https://www.google.com/\", \"_blank\"),\r\n              popup: () => alert(\"Terminal in React\"),\r\n              showmsg: () => {\r\n                return \"Hello World!\";\r\n              },\r\n            }}\r\n            descriptions={{\r\n              \"open-google\": \"opens google.com\",\r\n              showmsg: \"shows a message\",\r\n              alert: \"alert\",\r\n              popup: \"alert\",\r\n            }}\r\n            msg=\"You can write anything here. Example - Hello! My name is Foo and I like Bar.\"\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  /* TABLE RELATED METHODS AND STATES */\r\n\r\n  const [structure, setStructure] = useState(\"\");\r\n  const handleClick = (structureName) => {\r\n    setShowTerminal(false);\r\n    setShowTable(true);\r\n    setStructure(structureName);\r\n  };\r\n  const [showTable, setShowTable] = useState(false);\r\n  const table = () => {\r\n    if (showTable) {\r\n      return (\r\n        <>\r\n          <Row className=\"pt-3\">\r\n            <Col style={{ border: \"3px solid white\" }}>\r\n              <strong>{structure} Entry</strong>\r\n            </Col>\r\n            <Col style={{ border: \"3px solid white\" }}>\r\n              <strong>{structure} Data</strong>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col style={{ border: \"3px solid white\", height: \"150px\" }}>\r\n              /switch1/video1/v1\r\n            </Col>\r\n            <Col style={{ border: \"3px solid white\", height: \"150px\" }}>\r\n              Cached content at Node 1\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  /* QUICK COMMANDS RELATED TO NODES */\r\n\r\n  const [nodeClicked, setNodeClicked] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const onClickNode = (nodeID) => {\r\n    setNodeClicked(nodeID.toString());\r\n    setShowModal(true);\r\n  };\r\n  const modal = () => {\r\n    return (\r\n      <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{nodeClicked}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Container>\r\n            <Button variant=\"primary\">Command!</Button>\r\n          </Container>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => {\r\n              setShowModal(false);\r\n              setOutput(\"Output of command!\");\r\n            }}\r\n          >\r\n            Click Me!\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  // SHOW LOADING SCREEN\r\n\r\n  const [showLoading, setShowLoading] = useState(false);\r\n  const loadingOverlay = () => {\r\n    return (\r\n      <Modal\r\n        show={showLoading}\r\n        onHide={() => setShowLoading(false)}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Body>Performing operation, please wait awhile...</Modal.Body>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  if (ViewTopo) {\r\n    return (\r\n      <Container style={{ height: \"100vh\" }}>\r\n        {loadingOverlay()}\r\n        {modal()}\r\n        <h1 style={{ fontFamily: \"Roboto\" }}>Topology Viewer</h1>\r\n        <div\r\n          style={{\r\n            border: \"2px solid white\",\r\n            width: \"100%\",\r\n            height: \"51vh\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n        >\r\n          <Row>\r\n            <Col>\r\n              <div\r\n                style={{\r\n                  border: \"2px solid black\",\r\n                  width: \"100%\",\r\n                  height: \"50vh\",\r\n                  backgroundColor: \"white\",\r\n                }}\r\n              >\r\n                <Graph\r\n                  id=\"graph-id\" // id is mandatory\r\n                  data={data}\r\n                  config={myConfig}\r\n                  onClickNode={onClickNode}\r\n                  onClickLink={onClickLink}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n\r\n        <Container>\r\n          <Row className=\"mt-1\" class=\"text-center\">\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => {\r\n                  setShowTerminal(true);\r\n                  setShowTable(false);\r\n                }}\r\n                block\r\n              >\r\n                Terminal\r\n              </Button>{\" \"}\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => {\r\n                  setShowLoading(true);\r\n                  axios.get(\"http://localhost:3001/start\");\r\n                  setTimeout(() => {\r\n                    setShowLoading(false);\r\n                  }, 10000);\r\n                }}\r\n                block\r\n              >\r\n                Start NDN Stack\r\n              </Button>{\" \"}\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => {\r\n                  setShowLoading(true);\r\n                  axios.get(\"http://localhost:3001/stop\");\r\n                  setTimeout(() => {\r\n                    setShowLoading(false);\r\n                  }, 2000);\r\n                }}\r\n                block\r\n              >\r\n                Stop NDN Stack\r\n              </Button>{\" \"}\r\n            </Col>\r\n          </Row>\r\n          {table()}\r\n        </Container>\r\n        {terminal()}\r\n      </Container>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default TopoViewer;\r\n","import React from \"react\";\r\nimport \"../styles/style.css\";\r\n\r\nconst TitlePage = ({ ViewTitlePage, ViewLoginForm }) => {\r\n  if (ViewTitlePage) {\r\n    return (\r\n      <div className=\"TitlePage\">\r\n        <div id=\"particles-js\"></div>\r\n        <div class=\"bg\">\r\n          <h4 data-testid=\"portal-name\">ITTILAH PORTAL</h4>\r\n        </div>\r\n        <div class=\"container\">\r\n          <button\r\n            class=\"btn\"\r\n            onClick={() => {\r\n              ViewLoginForm();\r\n            }}\r\n          >\r\n            Login\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default TitlePage;\r\n","import React, { useState } from \"react\";\r\nimport Login from \"./Login\";\r\nimport TopoBuilder from \"./TopoBuilder\";\r\nimport TopoViewer from \"./TopoViewer\";\r\nimport axios from \"axios\";\r\nimport TitlePage from \"./TitlePage\";\r\nimport ParticleComponent from \"./ParticleComponent\";\r\nimport { Popover } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  const [data, setData] = useState({\r\n    nodes: [{ id: \"node0\" }, { id: \"node1\" }],\r\n    links: [{ source: \"node0\", target: \"node1\" }],\r\n  });\r\n\r\n  const [ViewTopo, setViewTopo] = useState(false);\r\n  const [ViewTitlePage, setViewTitlePage] = useState(true);\r\n  const [ViewLogin, setViewLogin] = useState(false);\r\n  const ViewLoginForm = () => {\r\n    setViewTitlePage(false);\r\n    setViewLogin(true);\r\n  };\r\n\r\n  const myConfig = {\r\n    nodeHighlightBehavior: true,\r\n    node: {\r\n      color: \"#42F3FB\",\r\n      size: 120,\r\n      highlightStrokeColor: \"blue\",\r\n    },\r\n    link: {\r\n      highlightColor: \"lightblue\",\r\n    },\r\n  };\r\n\r\n  const onClickNode = function (nodeId) {\r\n    console.log(nodeId);\r\n  };\r\n\r\n  const onClickLink = function (source, target) {\r\n    window.alert(`Clicked link between ${source} and ${target}`);\r\n  };\r\n\r\n  const [nodesNum, setNodesNum] = useState(data.nodes.length);\r\n  const [linkInput, setLinkInput] = useState({\r\n    sourceInput: \"\",\r\n    destinationInput: \"\",\r\n  });\r\n\r\n  const [loginInput, setLoginInput] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [nodeCordinates, setNodeCordinates] = useState({ x: 20, y: 20 });\r\n  const addNode = () => {\r\n    setNodesNum(nodesNum + 1);\r\n    const nodes = data.nodes.concat({\r\n      id: `node${nodesNum}`,\r\n      x: nodeCordinates.x,\r\n      y: nodeCordinates.y,\r\n    });\r\n    setData({ nodes: nodes, links: data.links });\r\n    setNodeCordinates({ x: nodeCordinates.x + 5, y: nodeCordinates.y + 10 });\r\n  };\r\n\r\n  const addLink = () => {\r\n    const var1 = data.nodes.find((node) => node.id === linkInput.sourceInput);\r\n    const var2 = data.nodes.find(\r\n      (node) => node.id === linkInput.destinationInput\r\n    );\r\n    const var3 = data.links.find(\r\n      (link) =>\r\n        link.source === linkInput.sourceInput &&\r\n        link.target === linkInput.destinationInput\r\n    );\r\n    if (var1 && var2) {\r\n      if (var3) {\r\n        window.alert(\"Link already exist!\");\r\n      } else {\r\n        const links = data.links.concat({\r\n          source: linkInput.sourceInput,\r\n          target: linkInput.destinationInput,\r\n        });\r\n        setData({ nodes: data.nodes, links: links });\r\n      }\r\n    } else {\r\n      const string = var1 ? \"Second\" : \"First\";\r\n      window.alert(`${string} node does not exist`);\r\n    }\r\n  };\r\n  const handleLogin = () => {\r\n    axios\r\n      .post(\"http://localhost:3001/persons\", loginInput)\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          setViewBuilder(true);\r\n        } else if (response.status === 204) {\r\n          throw Error(\"User name or Password incorrect!\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        window.alert(error);\r\n      });\r\n  };\r\n\r\n  const createTopology = () => {\r\n    axios\r\n      .post(\"http://localhost:3001/topology\", data)\r\n      .then(() => {\r\n        console.log(\"Data send to backend\");\r\n        setViewBuilder(false);\r\n        setViewTopo(true);\r\n      })\r\n      .catch((error) => {\r\n        window.alert(error);\r\n      });\r\n  };\r\n\r\n  const [viewBuilder, setViewBuilder] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"#000\",\r\n        color: \"white\",\r\n        // backgroundImage: \"linear-gradient(45deg, #85FFBD 0%, #FFFB7D 100%)\",\r\n        overflowY: \"scroll\",\r\n      }}\r\n    >\r\n      {/* <ParticleComponent /> */}\r\n      <TitlePage\r\n        ViewTitlePage={ViewTitlePage}\r\n        ViewLoginForm={ViewLoginForm}\r\n      ></TitlePage>\r\n\r\n      <Login\r\n        loginInput={loginInput}\r\n        setLoginInput={setLoginInput}\r\n        handleLogin={handleLogin}\r\n        viewBuilder={viewBuilder}\r\n        setViewBuilder={setViewBuilder}\r\n        ViewTopo={ViewTopo}\r\n        ViewLogin={ViewLogin}\r\n      ></Login>\r\n      <TopoBuilder\r\n        data={data}\r\n        addNode={addNode}\r\n        addLink={addLink}\r\n        linkInput={linkInput}\r\n        setLinkInput={setLinkInput}\r\n        createTopology={createTopology}\r\n        myConfig={myConfig}\r\n        onClickLink={onClickLink}\r\n        onClickNode={onClickNode}\r\n        ViewTopo={ViewTopo}\r\n        viewBuilder={viewBuilder}\r\n        username={loginInput.username}\r\n      ></TopoBuilder>\r\n      <TopoViewer\r\n        data={data}\r\n        myConfig={myConfig}\r\n        onClickLink={onClickLink}\r\n        onClickNode={onClickNode}\r\n        ViewTopo={ViewTopo}\r\n      ></TopoViewer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}